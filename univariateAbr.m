function iEEGhupAll_z = univariateAbr(norm_MNI_HUP_Atlas,iEEGhupAll)

for nElec = 1:size(iEEGhupAll,1)
    
    norm_mu = [norm_MNI_HUP_Atlas.deltaMean(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.thetaMean(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.alphaMean(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.betaMean(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.gammaMean(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.broadMean(iEEGhupAll.roiNum(nElec))];
    
    norm_sigma = [norm_MNI_HUP_Atlas.deltaStd(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.thetaStd(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.alphaStd(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.betaStd(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.gammaStd(iEEGhupAll.roiNum(nElec)),...
        norm_MNI_HUP_Atlas.broadStd(iEEGhupAll.roiNum(nElec))];
    
    relPow = [iEEGhupAll.delta(nElec), iEEGhupAll.theta(nElec), ...
        iEEGhupAll.alpha(nElec), iEEGhupAll.beta(nElec), ...
        iEEGhupAll.gamma(nElec),iEEGhupAll.broad(nElec)];
    
    relPow_z(nElec,:) = (relPow - norm_mu)./norm_sigma;
        
    
end

relPow_z = abs(relPow_z); % absolute value of abnormality

iEEGhupAll_z = [iEEGhupAll(:,1:3), array2table(relPow_z, ...
    'VariableNames',{'delta_z','theta_z','alpha_z','beta_z','gamma_z','broad_z'})];

end